<?xml version="1.0"?>
<!--
This is the Web-app Maven POM.


Template version: __TEMPLATE_VERSION__
Generation time : __GENERATION_TIME__
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>__REPLACE_GROUPID__</groupId>
    <artifactId>__REPLACE_SYSTEM_NAME__-__REPLACE_BC_NAME__</artifactId>
    <version>1.0-SNAPSHOT</version>
  </parent>
  <artifactId>__REPLACE_SYSTEM_NAME__-__REPLACE_BC_NAME__-module-web</artifactId>
  <packaging>war</packaging>
  <name>${project.artifactId}</name>

  <build>
    <finalName>${project.artifactId}</finalName>
    <plugins>
      <plugin>
        <!-- Configure eclipse plug-in to generate a context root that does not have the version number on it -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-eclipse-plugin</artifactId>
        <configuration>
          <wtpContextName>${project.artifactId}</wtpContextName>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <repositories>
    <!-- Repository for JSF 1.2 -->
  	<repository>
  		<id>java.net.1</id>
  		<name>Java.net Repository Maven 1 Legacy</name>
  		<url>http://download.java.net/maven/1</url>
  		<layout>legacy</layout>
  	</repository>
  </repositories>

  <dependencies>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>__REPLACE_SYSTEM_NAME__-__REPLACE_BC_NAME__-composite-webcomp</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>se.vgr.javg</groupId>
      <artifactId>javg-rt-support</artifactId>
      <version>${javg.version}</version>
    </dependency>
    <dependency>
      <groupId>taglibs</groupId>
      <artifactId>standard</artifactId>
      <version>1.1.2</version>
    </dependency>
    <dependency>
      <!-- TODO: upgrade to Spring WebFlow 2.x -->
      <groupId>org.springframework</groupId>
      <artifactId>spring-webflow</artifactId>
      <version>1.0.5</version>
      <!-- Exclude the version of Spring Framework that Webflow 1.0.5 wants -->
      <exclusions>
      	<exclusion>
      		<groupId>org.springframework</groupId>
      		<artifactId>spring-core</artifactId>
      	</exclusion>
      	<exclusion>
      		<groupId>org.springframework</groupId>
      		<artifactId>spring-beans</artifactId>
      	</exclusion>
      	<exclusion>
      		<groupId>org.springframework</groupId>
      		<artifactId>spring-context</artifactId>
      	</exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <!-- Use the resource-loading servlet from Spring-JS -->
      <groupId>org.springframework.webflow</groupId>
      <artifactId>org.springframework.js</artifactId>
      <version>2.0.3.RELEASE</version>
    </dependency>
    <dependency>
      <!-- required by the Spring-JS resource-loading servlet -->
      <groupId>org.springframework</groupId>
      <artifactId>spring-webmvc</artifactId>
      <version>${spring.fw.version}</version>
    </dependency>
    <!--
      We use a Servlet Filter from spring-web to control UTF-8 encodings.
      Facelets doesn't do this for us.
    -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-web</artifactId>
      <version>${spring.fw.version}</version>
    </dependency>
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>servlet-api</artifactId>
      <version>2.4</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>javax.faces</groupId>
      <artifactId>jsf-api</artifactId>
      <version>1.2_13</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>javax.faces</groupId>
      <artifactId>jsf-impl</artifactId>
      <version>1.2_13</version>
      <scope>compile</scope>
    </dependency>
    <!--
      DO NOT USE JSF 1.1.x - spec did not clearly specify which UI-components
      were allowed to generate JavaScript. In 1.2 only commandLink (out of the
      standard components) is allowed to generated JavaScript. Suns RI for 1.1
      already did this (but had problems with Facelets).
      MyFaces 1.1.x (<=1.1.6) generates loads of JavaScript for form submission.
      MyFaces 1.2.x seems to rely on Servlet 2.5 while Suns 1.2 RI can run
      with Servlet 2.4, see:
        http://raibledesigns.com/rd/entry/thoughts_on_myfaces_1_2
    -->
    <!--
    <dependency>
      <groupId>org.apache.myfaces.core</groupId>
      <artifactId>myfaces-api</artifactId>
      <version>1.1.5</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.myfaces.core</groupId>
      <artifactId>myfaces-impl</artifactId>
      <version>1.1.5</version>
      <scope>compile</scope>
    </dependency>
    -->

    <!--
      EL-jars (from java.net).
      Needed for Facelets 1.1.12 with JSF 1.1 (using MyFaces 1.1.5
      as JSF-implementation).
    -->
    <dependency>
      <groupId>javax.el</groupId>
      <artifactId>el-api</artifactId>
      <version>1.0</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>el-impl</groupId>
      <artifactId>el-impl</artifactId>
      <version>1.0</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>com.sun.facelets</groupId>
      <artifactId>jsf-facelets</artifactId>
      <version>1.1.14</version>
      <scope>compile</scope>
    </dependency>
  </dependencies>

</project>
